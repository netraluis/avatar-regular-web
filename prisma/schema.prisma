generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  DESACTIVE
}

enum AssitantStatus {
  PUBLIC
  PRIVATE
}

enum FileType {
  FILE
  NOTION
}

enum WelcomeType {
  PLAIN
  BUBBLE
}

enum AssistantCardType {
  REGULAR
}

enum MenuHeaderType {
  HEADER
  BODY
  FOOTER
}

enum LanguageType {
  EN
  ES
  FR
  CA
}

enum RoleUserType {
  ASSISTANT
  USER
  OBSERVER
}

enum ModeMessageType {
  TEST
  PROD
}

enum HeaderButtonType {
  PLAIN
}

enum UserType {
  OWNER
  ADMIN
}

model Message {
  id          String   @id @default(cuid())
  role        RoleUserType
  message     String
  threadId    String
  createdAt   DateTime @default(now())
  assistantId String
  filesId     String[]
  runId       String?
  mode        ModeMessageType

  assistant   Assistant        @relation(fields: [assistantId], references: [id])
}

model User {
  id          String    @id @default(uuid())
  email       String    // No uses @unique aquí porque vamos a crear una clave compuesta
  teams       UserTeam[]  
  status      UserStatus
  name        String?
  surname     String?
  imageUrl    String?
  language    LanguageType @default(CA)
  paddleCustomerId String?
  isSuperAdmin     Boolean      @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, status])  // Clave compuesta única en email y status
}

model Team {
  id          String      @id @default(uuid())
  name        String
  users       UserTeam[]  // Relación muchos a muchos con User a través de la tabla de unión
  assistants  Assistant[] // Relación uno a muchos con asistentes virtuales
  subDomain   String       @unique(map: "Unique_SubDomain_Field")
  customDomain String?
  welcome     Welcome[]  
  logoUrl     String?
  symbolUrl   String?
  avatarUrl   String?
  menuHeader      MenuHeader[]
  headerButton    HeaderButton[]
  defaultLanguage LanguageType
  selectedLanguages LanguageType[]
  footer          Footer[]
  teamDescription TeamDescription[]
  menuFooter      MenuFooter[]
  welcomeType     WelcomeType
  isActive        Boolean   @default(true) 
  paddleSubscriptionId String?
  subscription Subscription[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@unique([subDomain]) 
  @@unique([customDomain]) 
}

model HeaderButton {
  id          String      @id @default(uuid())
  buttonText  String?
  title       String?
  type  HeaderButtonType
  text        String[]
  teamId      String
  language    LanguageType
  
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  @@unique([language, teamId])

}

model MenuHeader {
  id          String      @id @default(uuid())
  type        MenuHeaderType
  textHref    TextHref[]
  teamId      String      
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([type, teamId])
}

model TextHref {
  id              String      @id @default(uuid())
  numberOrder     Int
  menuHeaderId    String?     
  hrefLanguages     HrefLanguages[]

  menuHeader        MenuHeader?   @relation(fields: [menuHeaderId], references: [id], onDelete: Cascade)

}

model HrefLanguages {
  id              String     @id @default(uuid())
  text            String
  href            String
  language        LanguageType
  textHrefId      String     

  textHref        TextHref   @relation(fields: [textHrefId], references: [id], onDelete: Cascade)

  @@unique([textHrefId, language])
}


model Welcome {
  id          String      @id @default(uuid())
  text        String[]
  description String
  language    LanguageType
  teamId      String      

  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade) 
  @@unique([language, teamId])
}

model TeamDescription {
  id          String      @id @default(uuid())
  text        String
  language    LanguageType
  teamId      String      
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([language, teamId])
}

model Footer {
  id          String      @id @default(uuid())
  text        String
  language    LanguageType
  teamId      String      
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([language, teamId])
}

model MenuFooter {
  id          String      @id @default(uuid())
  text        String
  language    LanguageType
  teamId      String      
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([language, teamId])
}

model Assistant {
  id                        String   @id @default(uuid())
  name                      String   // Nombre del asistente virtual (IA)
  teamId                    String
  status                    AssitantStatus @default(PRIVATE)
  openAIId                  String
  openAIVectorStoreFileId   String
  notionAccessToken         String?
  avatarId                  String?
  url                       String
  message                   Message[]
  assistantCard             AssistantCard[]
  emoji                     String?     
  isActive                  Boolean   @default(true)        

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  files       File[]
  avatar      Avatar?   @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([openAIId])
  @@unique([url,teamId])
}

model AssistantCard {
  id          String      @id @default(uuid())
  title       String      @default("")
  description String[]
  type        AssistantCardType
  language    LanguageType
  assistantId String      

  assistant   Assistant   @relation(fields: [assistantId], references: [id], onDelete: Cascade) 
  @@unique([language, assistantId])
}

model Avatar {
  id            String   @id @default(uuid())
  assistants    Assistant[]
  avatarId      String
  voiceAvatarId String
}

model UserTeam {
  userId      String 
  teamId      String  
  type        UserType

  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId]) // Clave primaria compuesta
}

model File {
  id                  String      @id @default(uuid())
  openAIVectorStoreId String
  openAIFileId        String
  assistantId         String
  type                FileType
  filename            String
  bytes               Int

  assistant           Assistant   @relation(fields: [assistantId], references: [id])

  @@unique([openAIFileId])
}

model Subscription {
  id                   String     @id @default(uuid())
  teamId               String     @unique
  status               String
  priceId            String
  scheduleChange       DateTime? 
  endBillingData       DateTime
  startBillingData     DateTime
  cycles           SubscriptionCycle[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  team                 Team   @relation(fields: [teamId], references: [id], onDelete: Cascade) 
}

model SubscriptionCycle {
  id                   String     @id @default(uuid())
  subscriptionId       String
  status               String
  priceId              String
  startOfCycle         DateTime
  endOfCycle           DateTime
  maxCredits           Int
  extraCredits         Int

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  subscription         Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade) 
}