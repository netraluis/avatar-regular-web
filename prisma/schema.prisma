generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  DESACTIVE
}

enum AssitantStatus {
  PUBLIC
  PRIVATE
}

enum FileType {
  FILE
  NOTION
}

enum WelcomeType {
  PLAIN
  GLOVE
}

enum AssistantCardType {
  REGULAR
}

enum MenuHeaderType {
  HEADER
  BODY
  FOOTER
}

enum FooterType {
  PLAIN
}

enum LanguageType {
  EN
  ES
  FR
  CA
}

enum RoleUserType {
  ASSISTANT
  USER
}

model Message {
  id          String   @id @default(cuid())
  role        RoleUserType
  message     String
  threadId    String
  createdAt   DateTime @default(now())
  assistantId String
  filesId     String[]
  runId       String?

  assistant   Assistant        @relation(fields: [assistantId], references: [id])
}

model Domains {
  id               String   @id @default(cuid())
  name             String
  subDomain        String
  customDomain     String
  welcome          String
  logo             String?
  description      String?
  symbol           String?
  assistantId      String
  assistantName    String
  menuHeader       Json
  menuBody         Json
  menufooter       String
  avatarId         String   @default("")
  voiceAvatarId    String   @default("")
  headerDisclaimer Json?
  welcomeCards     Json?     
  footerText       String?
  welcomeDesign    Json?
  createdAt        DateTime @default(now())
}

model User {
  id          String    @id @default(uuid())
  email       String    // No uses @unique aquí porque vamos a crear una clave compuesta
  teams       UserTeam[]  
  status      UserStatus
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, status])  // Clave compuesta única en email y status
}

model Team {
  id          String      @id @default(uuid())
  name        String
  users       UserTeam[]  // Relación muchos a muchos con User a través de la tabla de unión
  assistants  Assistant[] // Relación uno a muchos con asistentes virtuales
  subDomain   String       @unique(map: "Unique_SubDomain_Field")
  customDomain String?
  welcome     Welcome[]  
  logoUrl     String?
  symbolUrl   String?
  menuHeader      MenuHeader[]
  headerButton    HeaderButton[]
  defaultLanguage LanguageType
  footer      Footer[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@unique([subDomain]) 
  @@unique([customDomain]) 
}

model HeaderButton {
  id          String      @id @default(uuid())
  buttonText  String
  title       String
  buttonType  String
  textHref    TextHref[]
  teamId      String
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

}

model MenuHeader {
  id          String      @id @default(uuid())
  type        MenuHeaderType
  textHref    TextHref[]
  teamId      String      
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([type, teamId])
}

model TextHref {
  id              String      @id @default(uuid())
  text            String
  href            String
  numberOrder     Int
  language        LanguageType
  menuHeaderId    String?     
  headerButtonId  String?    
  defaultTextHrefId String?  

  defaultTextHref   TextHref? @relation("TextHrefDefault", fields: [defaultTextHrefId], references: [id], onDelete: Cascade)
  translations      TextHref[] @relation("TextHrefDefault")

  menuHeader        MenuHeader?   @relation(fields: [menuHeaderId], references: [id], onDelete: Cascade)
  headerButton      HeaderButton? @relation(fields: [headerButtonId], references: [id], onDelete: Cascade) 

}


model Welcome {
  id          String      @id @default(uuid())
  text        String[]
  type        WelcomeType
  description String
  language    LanguageType
  teamId      String      

  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade) 
  @@unique([language, teamId])
}

model Footer {
  id          String      @id @default(uuid())
  type        FooterType  @default(PLAIN)
  text        String
  language    LanguageType
  teamId      String      
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([language, teamId])
}

model Assistant {
  id                        String   @id @default(uuid())
  name                      String   // Nombre del asistente virtual (IA)
  teamId                    String
  status                    AssitantStatus @default(PUBLIC)
  openAIId                  String
  openAIVectorStoreFileId   String
  notionAccessToken         String?
  avatarId                  String?
  url                       String    @unique 
  message                   Message[]
  assistantCard             AssistantCard[]
  emoji                     String?             

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  files       File[]
  avatar      Avatar?   @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([name, teamId])  // Clave compuesta única en name y para cada assistant
  @@unique([openAIId])
}

model AssistantCard {
  id          String      @id @default(uuid())
  title       String      @default("")
  description String[]
  type        AssistantCardType
  language    LanguageType
  assistantId String      

  assistant   Assistant   @relation(fields: [assistantId], references: [id], onDelete: Cascade) 
  @@unique([language, assistantId])
}

model Avatar {
  id            String   @id @default(uuid())
  assistants    Assistant[]
  avatarId      String
  voiceAvatarId String
}

model UserTeam {
  userId      String 
  teamId      String  

  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId]) // Clave primaria compuesta
}

model File {
  id                  String      @id @default(uuid())
  openAIVectorStoreId String
  openAIFileId        String
  assistantId         String
  type                FileType
  filename            String
  bytes               Int

  assistant           Assistant   @relation(fields: [assistantId], references: [id])

  @@unique([openAIFileId])
}