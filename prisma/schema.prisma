generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  DESACTIVE
}

enum AsssitantStatus {
  PUBLIC
  PRIVATE
}

model Messages {
  id          String   @id @default(cuid())
  role        String
  message     String
  threadId    String
  domainId    String  
  createdAt   DateTime @default(now())
}

model Domains {
  id               String   @id @default(cuid())
  name             String
  subDomain        String
  customDomain     String
  welcome          String
  logo             String?
  description      String?
  symbol           String?
  assistantId      String
  assistantName    String
  menuHeader       Json
  menuBody         Json
  menufooter       String
  avatarId         String   @default("")
  voiceAvatarId    String   @default("")
  headerDisclaimer Json?
  welcomeCards     Json?     
  footerText       String?
  welcomeDesign    Json?
  createdAt        DateTime @default(now())
}

model User {
  id          String    @id @default(uuid())
  email       String    // No uses @unique aquí porque vamos a crear una clave compuesta
  teams       UserTeam[]  
  status      UserStatus
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, status])  // Clave compuesta única en email y status
}

model Team {
  id          String      @id @default(uuid())
  name        String
  users       UserTeam[]  // Relación muchos a muchos con User a través de la tabla de unión
  assistants  Assistant[] // Relación uno a muchos con asistentes virtuales
  subDomain   String
  customDomain String?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@unique([subDomain]) 
  @@unique([customDomain]) 
}

model Assistant {
  id          String   @id @default(uuid())
  name        String   // Nombre del asistente virtual (IA)
  teamId      String
  status      AsssitantStatus @default(PUBLIC)
  openAIId    String
  openAIVectorStoreId String

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([name, teamId])  // Clave compuesta única en name y para cada team
  @@unique([openAIId])
}

model UserTeam {
  userId      String 
  teamId      String  

  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId]) // Clave primaria compuesta
}